{
    "h1:title":"Hello There 👋 Welcome to Mesih's JSON Website Generator 🚀",
    "md:info":"Once upon a time, there was a PhD student named Mesih 🤓. He was knee-deep in research, studying the intricacies of bioinformatics 🧬. But as he worked on his manuscript, he found himself facing a common problem among researchers: creating companion websites to showcase his findings.\n\nMesih found himself creating three separate websites for three different manuscripts, and each time he thought to himself, \"there has to be a better way!\" 🤔\n\nSo, being the tech-savvy bioinformatician that he is, Mesih set out to create a website generator that would make it easy for researchers like himself to present their findings in a visually appealing and interactive way 🚀.\n\nHe realized that with JSON, a dictionary-like format, he could represent nearly anything! 🤯 So, he got to work and created the generator you see before you today.\n\nWith this generator, you can easily create tables, charts, and graphs to present your findings in a clear and easy-to-understand format. You can also include interactive elements, such as charts, that allow visitors to explore the data in more depth. 📊📈🔍\n\nNot only that, but you can also use the generator to create pages that provide explanations of key concepts and techniques used in your research. For example, you could include markdown sections with explanations and diagrams to help visitors understand the methods and techniques used in your study.🔬📝\n\nBut that's not all! The generator can also be used for creating portfolios, landing pages, documentation websites, event websites and more. 🚀📊💻\n\nAnd so, with the help of a little bit of coding magic 🧙‍♂️ and a lot of determination, Mesih created a website generator that makes it easy for researchers to present their findings in an interactive and easily accessible format.\n\nHere you are using it, Mesih's creation, a website generator that will make your research presentation a breeze 🌬🌪.\n\n### 💻Here are the contents of this documentation:\n\n-   [Getting-Started](/getting-started): 🚀We'll take off with learning how to use a JSON file to represent basic websites that have titles, markdowns, and images.\n-   [Layouts](/layouts): 🎨 We'll delve a little deeper and show you how to use the grid system to make 2-column websites and wrap up components with sections.\n-   [Bioinformatics](/bioinformatics): 🔬 Here's where things get exciting! We'll showcase the advanced features, like protein sequence and structure visualization and super helpful paginated, searchable and filterable table generation with just row and column data.\n-   [Plots&Chars](/Plots&Charts): 📊 We'll show you how to embed Plotly plots into your research webpage like a boss.\n-   [Python](/Python): 🐍 Finally, we'll give you an example of how to generate a website for your research article using a programming language.",
    "navpage:getting-started":{
        "h1:title": "🎉🚀 WELCOME to the JSON Website Generator! 🚀🎉",
        "md:intro": "This generator allows you to create visually stunning websites with just a simple JSON file. 💻📜 In this documentation, you'll learn how to become a website creating pro and add all sorts of fancy elements to your site.📚🔥\n\n##### Loading JSON 📁\n\n🚀 Are you ready to take your website game to the next level? 🤔 But first things first, let's learn how to load that juicy JSON data onto the site! 🤗 Whether you prefer the classic \"browse your computer\" method or the fancy \"URL magic\" trick, we've got you covered. 🧙‍♂️\n\nSo, you've got two options, my friend! 🤔\n\n- Option 1: You can click the the upload file icon on the top right corner of the page, and select your JSON file from your computer. Easy peasy, lemon squeezy! 🍋\n\n- Option 2: You can be a real tech-savvy 🤖 and use the `?json=` argument in this website URL. This way, you can load a JSON file straight from the internet, like from Github. 🌎 Just make sure the file is publicly accessible, otherwise it's gonna be a no-go. 🚫\n\nSo, what are you waiting for? Go forth and load that data! 🚀\n\nBut before you go, 📚 want to revisit this documentation? No problemo! Just click that little question mark icon in top right corner and voila! 🔍 You're back where you left off! 💻\n\n👀 Don't forget, the 💡name of the json file will be shown in the 🔝left top corner of the website 💻! Just 🔜side of the 🏠homepage icon 🌟!",
        "md:examples_intro": "##### The First Steps 🦶\n\nTo help you get started 🚀, here are some basic examples of how you can use the different elements and properties 🔧. Try them out and see what you can create! 🤩 You can copy the JSON, paste it into a file, and upload it to the site 📂.",
        "md:info:6":"```js\n{\n\t\"h2:title\":  \"A title\",\n\t\"p:info\":  \"And here is a paragraph\"\n}\n```\n👉 This should look like this.",
        "section:ex1:6": {
            "h2:title":  "A title",
            "p:info":  "And here is a paragraph"
        },
        "md:ex2:6": "We can embed pictures too 🖼️!\n\n```js\n{\n    \"h2:title\": \"My Awesome Website\",\n    \"p:intro:6\": \"Welcome to my website!\",\n    \"img:logo:6\": {\n        \"src\": \"https://picsum.photos/200\",\n        \"height\": \"200\"\n    }\n}```\n\n👉 Here is the result!",
        "section:ex2:6": {
            "h2:title": "My Awesome Website",
            "p:intro:6": "Welcome to my website!",
            "img:logo:6": {
                "src": "https://picsum.photos/200",
                "height": "200"
            }
        },
        "md:info2:6": "The navpage tag 🔖, a real lifesaver, helps you create a page that will be displayed in the AppBar 🪄 like a boss! \n\n```js\n{\n\t\"navpage:about\": {\n\t\t\"h2:title\":  \"About Page\",\n\t\t\"p:info\":  \"This site creates static websites from json.\"\n\t},\n\t\"p:info\":  \"And here is a paragraph\"\n}\n```",
        "img:navpage:6": {
            "src": "https://raw.githubusercontent.com/MesihK/react-json-wpbuilder/master/imgs/navpage.png",
            "height": 200
        },
        "md:outro": "##### The Finish Line 🎇\n\nThis should help you get started 🚀 You can build amazing things already 🌟 But if you're ready to level up, head on over to the other pages in the AppBar 🪄 and discover all the cool things you can do with the JSON Website Generator. From tables 📊 to charts 📈, protein sequence visualizers 🧬, and more, the possibilities are endless. Go forth and create something amazing! 🎨"
    },
    "navpage:layouts":{
        "h2:title": "📖 Layouts",
        "md:layout": "You can create different layout options available using the xs property. The keys 🔑 in the JSON file represent the type 📝 of element and the width 📏 of the grid (using the xs property) in the website generator's grid system 🛠. They're separated by colons 🔍. For example, `md:info:6` creates a markdown section named info and takes up half of the page 🌟.\n\n#####🔥 Two Column Layout\n\nTo create a two-column layout, you'll need to specify the xs property for each element. The xs property determines the width of the element on the page, with a maximum value of 12.\n\n",
        "md:layoutexp:6": "Here's an example of a two-column layout:\n\n```json\n{\n    \"h2:title\": \"Here is how a 2-column layout looks like!\",\n    \"md:column1:6\": \"📝 This is the content for column 1\",\n    \"md:column2:6\": \"📝 This is the content for column 2\"\n}\n```\n\nIn this example, both `column1` and `column2` have an xs value of 6, which means they will each take up half of the available space on the page.",
        "section:ex4:6":{
            "h2:title": "Here is how a 2-column layout looks like!",
            "md:column1:6": "📝 This is the content for column 1",
            "md:column2:6": "📝 This is the content for column 2"
        },
        "md:tips": "##### 💡 Tips\n\n- To create a three-column layout, you'll need to set the xs property for each element to a value of 4.\n- You can also use the xs property to create a single-column layout by setting the xs property for all elements to a value of 12 or not specifying them at all!\n- 🎨 Remember to have fun and be creative with your layouts!\n***\n\n",
        "md:section": "##### Sections\n\nThe `section` tag is a powerful tool that allows you to create custom layouts and organize your elements in a way that makes sense for your specific use case.\n\nFor example, let's say you're creating a bioinformatics website that focuses on the structure and function of a particular protein. You might use the `section` tag to create a section for the protein's sequence, a section for its 3D structure, and a section for any relevant research findings.\n\nHere's an example of how you might use the `section` tag in a json file to create a visually appealing layout for this information:\n\n```json{\n    \"section:sequence\": {\n        \"h2:sequenceTitle\": \"Protein Sequence\",\n        \"seq:testseq:6\": \"MAACCAACAKKV\"\n    },\n    \"section:structure\": {\n        \"h2:structureTitle\": \"3D Structure\",\n        \"pdb:3pqr:6\": {\n            \"path\":\"rcsb://6vsb\",\n            \"height\":\"400px\"\n        }\n    },\n    \"section:findings\": {\n        \"h2:findingsTitle\": \"Research Findings\",\n        \"md:findingsInfo:6\": \"Recent studies have shown that this protein plays a key role in the replication of the SARS-CoV-2 virus 🦠🔬\"\n    }\n}\n```\n\nAs you can see, the `section` tag allows you to create distinct areas on the page for different types of information, and you can use other tags within each section to add elements like headings, sequence, structure, markdown etc.\n\nThis is a powerful way to organize your website and ensure that all the information is presented in a clear and easy-to-understand way 📚💻"
    },
    "navpage:bioinformatics":{
        "h2:title": "JSON Website Generator for Bioinformatics Research 🌟",
        "md:intro":"Are you a bioinformatics researcher looking to present your findings in a visually appealing and interactive way? Look no further! Our generator is designed to make it easy for you to create a beautiful and professional-looking website 💻 to showcase your research 🔬.\n\nWith our generator, you can easily display important information such as protein sequences 🧬 using the `seq` tag, protein structures 🔬 using the `pdb` tag, and charts 📈 using the `plot` tag. Plus, with the `navpage` tag 🔖, you can create pages that will be displayed in the AppBar 📱, making it easy for visitors to navigate your site.\n\nMoreover, creating tables to present your data can be a tedious task, but not with our generator! With the `table` tag 📊, you can easily generate tables to showcase your data in a  clear and organized way. You can customize the columns, set the rows, and even add links to other pages within your site for additional information. Plus, you can use the `l:` prefix to create a column with a hyperlink, making it easy for visitors to access more information. And the best part? Our tables are not only beautiful, but also fully interactive  🤖. You can easily paginate 📄, search 🔍, and filter 🕵️‍♂️ your data, making it easy for visitors to find the information they need. With our generator, creating tables to present your data is now a breeze 💨.\n\nSo why wait? Give our generator a try and take your research presentation to the next level 🚀.",
        "md:ex1:6":"##### An Example: Understanding the Spike Protein of COVID-19 🦠\n\nOne of the key proteins in the COVID-19 virus is the spike protein. It plays a crucial role in the virus's ability to enter host cells. \n\nBut what does the spike protein look like? With our generator's `seq` tag 🔍, we can easily display the protein sequence 🧬 in a clear and easy to read format.\n\nBut just seeing the sequence isn't enough. To truly understand the spike protein, we need to visualize its structure 🔬. With the `pdb` tag, we can easily embed 3D structures of the spike protein.\n\nFor example, here is the spike protein of COVID-19 with the structure path of \"rcsb://6vsb\":\n\n```json\n{\n\t\"h2:title\":\"Covid Spike Protein Sequence & Structure\",\n    \"seq:spike_protein\": \"MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIV\",\n    \"pdb:spike_structure\": {\n        \"path\":\"rcsb://6vsb\",\n        \"name\":\"6VSB Spike Protein\",\n        \"height\":\"400px\"\n    }\n}\n```\nWith this generator, you can easily showcase the protein sequence and structure of the spike protein, providing visitors with a deeper understanding of the virus 🧠",
        "section:ex1:6":{
            "h2:title":"Covid Spike Protein Sequence & Structure",
            "seq:spike_protein": "MFVFLVLLPLVSSQCVNLTTRTQLPPAYTNSFTRGVYYPDKVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIV",
            "pdb:spike_structure": {
                "pdb":"https://alphafold.ebi.ac.uk/files/AF-O60091-F1-model_v4.pdb1",
                "name":"6VSB Spike Protein",
                "height":"400px"
            }
        },
        "md:ex2intro":"##### Tables\n\n💻Creating tables with the table tag is a breeze! 🔠Just specify the rows and columns as arrays and voila! 🎉Your resulting page will be not only paginated, but also searchable and filterable.🔍🔎 Making it super easy to navigate and find the information you need! 🙌",
        "md:ex2:6":"```json\n{\n    \"table:covid_studies\": {\n        \"columns\": [\"Title\", \"Authors\", \"l:Link\"],\n        \"rows\": [\n            [\"Structure and Mechanism of the SARS-CoV-2 Spike Protein\", \"J.W. Brown et al.\", \"https://www.nature.com/articles/s41586-020-2295-9@Nature\"],\n            [\"Cryo-EM structure of the SARS-CoV-2 spike receptor-binding domain bound to ACE2\", \"A. Gao et al.\", \"https://science.sciencemag.org/content/early/2020/03/03/science.abb2762@Science\"],\n            [\"Atomic structure of the SARS-CoV-2 spike glycoprotein\", \"Y. Wu et al.\", \"https://www.nature.com/articles/s41586-020-2271-0@Nature\"]\n        ]\n    }\n}\n```\n",
        "section:ex2:6":{
            "table:covid_studies": {
                "columns": ["Title", "Authors", "l:Link"],
                "rows": [
                    ["Structure and Mechanism of the SARS-CoV-2 Spike Protein", "J.W. Brown et al.", "https://www.nature.com/articles/s41586-020-2295-9@Nature"],
                    ["Cryo-EM structure of the SARS-CoV-2 spike receptor-binding domain bound to ACE2", "A. Gao et al.", "https://science.sciencemag.org/content/early/2020/03/03/science.abb2762@Science"],
                    ["Atomic structure of the SARS-CoV-2 spike glycoprotein", "Y. Wu et al.", "https://www.nature.com/articles/s41586-020-2271-0@Nature"]
                ]
            }
        },
        "md:outro": "When it comes to generating tables, we have to be serious about the columns and rows 😄. Each table needs a column array to hold all the headers and a row array to hold all the data. 💻\n\nBut if a column starts with \"l:\", it's a special column! 🎉 This column will hold links as data, so you can click on them and be whisked away to other parts of the internet! 🚀\n\nIn the row data for this column, links are defined as [link]@[name]. That's right, like a superhero team, the link and name join forces to become an unstoppable force of navigation! 💪\n\nSo remember, when creating tables, keep it serious with the columns and rows, but have a little fun with the links! 🔬📚"
    },
    "navpage:Plots&Charts": {
        "h1:title": "🎉 Let's talk about charts and plots! 📈",
        "md:intro": "Did you know that our JSON Website Generator can handle Plotly json format? 🤯 That's right, you can create beautiful and interactive charts just by using a simple JSON file.",
        "md:ex1:6": "Here's an example of a bar chart:\n\n```js\n{\n    \"plot:n1\": {\n        \"data\": [{\n            \"x\": [\"giraffes\",\"orangutans\",\"monkeys\"],\n            \"y\": [20,14,23],\n            \"type\": \"bar\"\n        }],\n        \"height\":400\n    }\n}\n```\nJust copy and paste this JSON into your file and upload it to the site! 💾",
        "section:ex1:6": {
            "plot:n1": {
                "data": [{
                    "x": ["giraffes","orangutans","monkeys"],
                    "y": [20,14,23],
                    "type": "bar"
                }],
                "height":400
            }
        },
        "md:outro": "Just copy and paste this JSON into your file and upload it to the site! 💾\n\n**Note:** The layout key is not supported in our generator, but don't worry, you can still control the height of the chart with the height key.\n\nFor more information on the Plotly JSON format, you can check out their official documentation at [plotly json docs](https://plotly.com/chart-studio-help/json-chart-schema/). Get creative and see what amazing charts you can come up with! 🚀"
    },
    "navpage:Python": {
        "h1:title": "Generating JSON File From Python",
        "md:intro": "🔥 You can create supplementary websites for your research article with R, Python, or any other language you're in love with! 💕 Simply present your data as key-value pairs and transform it into JSON. 💻 And if you're feeling adventurous, here's a way to generate a website for a reciprocal best hit study using Python 🐍.",
        "md:exp:6": "💡We have a variable `website` which is a dictionary containing the basic structure of our website.\n\nBut first, let's understand the basic structure of the JSON that we want to generate. We want to create a `website` object that has:\n\n-   A header title `'h1:title'`\n-   A summary `'p:summary'`\n-   A table of results `'table:results'` with columns `['l:link','Organism 1','Organism 2']` and rows that will be filled later.\n-   Pages for each study in the research, each study is a separate object inside the `website` object with a key format of `'page:'+studyPage`. Each study has:\n    -   A header title `'h1:title'`\n    -   Info `'p:info'`\n    -   Table of results `'table:results'` with columns `['l:Protein','Best RBH','Source','Fatcat','Seq. ID.','Same Panther,'# RBH']` and rows that will be filled later.\n    -   Protein information page `'page:'+p1` with:\n        -   Title `'h1:title'`\n        -   Info `'md:info'`\n        -   Table of summary `'table:summary'` with columns `['Method','Uniprot ID','Seq. ID.','Fatcat Pvalue','l:PANTHER']` and rows that will be filled later.\n        -   Explanation `'md:exp'`\n        -   PDB files of the protein `'pdb:p1:6'` and best hit `'pdb:best:6'`\n\n👉Now, let's get to work! \n\n1.  First, we'll create the `website` object with the header title, summary and table of results as described in the basic structure.\n2.  Next, we will create a function `protein_page(p1)` that will take a protein id `p1` as input and create the detailed page for it, as well as the table entry in the study page.\n\n-   Inside the function, we'll start by finding the reciprocral best hit using the `reciprocral_res[study][p1]`\n-   Then, we'll find the best homolog and if all methods find the same Panther family.\n-   We'll fill the table in the organism page with the given columns.\n-   Then, we'll create the result page with the given structure and fill in the relevant information.\n-   Finally, we'll fill the summary table and return the page and row.\n\n3.  After that, we'll create pages for each study in the research using a for loop.\n\n-   We'll iterate through `reciprocral_res` and create a separate object in the `website` object for each study with a key format of `'page:'+studyPage`\n-   For each study, we'll create a table of results, fill in the header title and info, and finally, call the `protein_page(p1)` function to fill in the rest of the information.",
        "md:code:6": "```python\nwebsite = {\n    'h1:title':'PROST Reciprocral Best Hit Analysis',\n    'p:summary':'This page presents the study of reciprocral best hits using 3 different methods: PROST, Fatcat using Alphafold models and BLAST. Reciprocral best hit found between 5 organisims',\n    'table:results': {\n        'columns': ['l:link','Organism 1','Organism 2'],\n        'rows':[]\n    }\n}\n\n#this function takes a protein id and\n#creates the detail page for it and \n#the table entry in the study page\ndef protein_page(p1):\n    p1r = reciprocral_res[study][p1]\n    \n    #find the best homolog\n    ...\n\n    #find if all methods find same Panther familiy\n    ...\n    \n    # fill the table in the organism page\n    #'l:Protein','Best RBH','Source','Fatcat','Seq. ID.','Same Panther,'# RBH'\n    row = ['/'+studyPage+'/'+p1+'@'+p1,bProt,bMethodsStr,get_fatcatres(bKey)[0],\n           f'{get_seqid(bKey):.2f}%',pantherRes,len(list(p1r.keys()))]\n    \n    #create the result page\n    page = {\n        'h1:title': S1 + ' ' + p1 + ' results',\n        'md:info': 'This page presents reciprocral best hit results for ' + get_uniprot_link_md(p1) + ' in ' + S2 + ' genome.' +\n        ' The panther familiy of this protein is: ' + get_panther_link_md(get_panther(p1)),\n        'table:summary': {\n            'columns': ['Method','Uniprot ID','Seq. ID.','Fatcat Pvalue','l:PANTHER'],\n            'rows': []\n        },\n        'md:exp': f'### Results\n\nThe best reciprocral hit is **{get_uniprot_link_md(bProt)}** which is found by {bMethodsStr}.\n\n'\\n        +f'The fatcat P-Value is: **{get_fatcatres(bKey)[0]}** with an RMSD of: **{get_fatcatres(bKey)[1]} angstrom**\n\n' \\n        +f'The sequence alignment identity is: **{get_seqid(bKey):.2f}%**\n\n'\\n        +f'{p1} shown in left and {bProt} shown in right. These structures colored based on secondary structures.',\n        'pdb:p1:6': { 'path': get_pdb_url(p1) },\n        'pdb:best:6': { 'path': get_pdb_url(bProt) },\n    }\n    \n    #fill the summary table\n    for m in p1r:\n        p2 = p1r[m]\n        \n        key = getKey(p1,p1r[m])\n        sid = '%.2f'%seqid[key]\n        if key not in fatcatres: \n            print(key,'not found in fatcat results')\n            fcres = '?'\n        else: fcres = fatcatres[key][0]\n        panther = get_panther(p2)\n        \n        page['table:summary']['rows'].append([m.upper(),p2,sid,fcres,f'http://www.pantherdb.org/panther/family.do?clsAccession={panther}@{panther}'])\n        \n    return page,row \n\n#Create pages for each study in the research\n#Each study investigates reciprocral best hits for a pair of organisms\n#create table for each study\nfor study in reciprocral_res:\n    print(study)\n    s1,s2 = study.split(':')\n    S1,S2 = tr[s1].replace('_','. '), tr[s2].replace('_','. ')\n    studyPage = s1+'_'+s2\n    website['table:results']['rows'].append(['/'+studyPage+'@'+s1+'-'+s2,S1,S2])\n    website['page:'+studyPage]={\n        'h1:title': S1 + ' & ' + S2 + ' reciprocral best hit analysis',\n        'p:info': 'This page presents the proteins of ' + S1 + '. The table below has a row for each protein. If clicked a detailed view of reciprocral best hits found by 3 different method (PROST, BLAST and Fatcat) will be shown',\n        'table:results': {\n            'columns': ['l:Protein','Best RBH','Source','Fatcat','Seq. ID.','Same Panther','# RBH'],\n            'rows':[]\n        }\n    }\n    #now for each study, there is a list of proteins to show. \n    #Create a detail page for each protein and fill the table in the study page\n    for p1 in reciprocral_res[study]:\n        page,row = protein_page(p1)\n        website['page:'+studyPage]['table:results']['rows'].append(row)\n        website['page:'+studyPage]['page:'+p1] = page\n\n#finally write the python object `website` as JSON to file. \n#we'll use this file to open in the website generator\nwith open('website/t1.json','w') as f:\n    f.write(json.dumps(website))\n```",
        "md:outro:": "💡And that's it! You now have a JSON file that can be easily turned into a website. 🎉\n\n\n🔍 Just remember that this code is a snippet and there might be other functions used in the code that have not been shown here."
    },
    "navpage:about": {
        "h2:title":  "What is all about this page?",
        "md:info":  "This site creates beautiful and interactive static websites from json 💻🚀 Here are a few ways you can use this website generator to showcase your skills and ideas:\n\n1.  **Creating a portfolio website:** Show off your past projects and skills with a sleek and professional website 💼\n    \n2.  **Building a landing page:** Use the generator to create a landing page for a specific product or service you're offering. You can include product information, and  contact information 🛍\n    \n3.  **Building a documentation website:** Create a website to document a project, software, or any product. You can include installation instructions, usage examples, and API references 📚\n    \n4.  **Building an event website:** Create a website for an upcoming event, such as a conference, concert, or festival. You can include event information, and a schedule 🎫.\n\nBut the generator isn't limited to just these uses. It's also perfect for bioinformatics research 🧬. You can use the generator to create a website as a supplement to your research paper. It's perfect for presenting findings, data, and other information in a visually appealing and interactive way.\n\n5.  **Research Paper Companion Website** You can use the generator to create a webpage that includes tables, charts, and graphs to present your findings in a clear and easy-to-understand format. You can also include interactive elements such as buttons, that allow visitors to explore the data in more depth.\n\nYou can also use the `section` tag to help organize elements and create custom layouts. This is useful for creating pages that provide explanations of key concepts and techniques used in your research. You can include markdown sections with explanations and diagrams to help visitors understand the methods and techniques used in your study.\n\nAdditionally, you could also use the `table` tag to create tables that are paginated, searchable, and filterable. This can be useful for creating a \"Methods\" page where you can provide detailed information about the participants, materials, procedures, and data analysis methods used in your study.\n\nYou could also use the `navpage` tag to create a page that is shown in the AppBar 🪄 and create a \"References\" page where you can list all the sources used in your research paper.\n\nOverall, using a website generator to create a supplement to your research paper can be an effective way to present your findings, data, and explanations in an interactive and easily accessible format.📊📈🔍"
    }
}